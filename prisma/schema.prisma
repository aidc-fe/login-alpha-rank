generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String
  emailVerified    DateTime?
  image            String?
  from             String?
  password         String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  businessDomainId String   // Foreign key to BusinessDomain model
  businessDomain   BusinessDomain @relation(fields: [businessDomainId], references: [id], onDelete: Cascade)

  accounts         Account[]
  sessions         Session[]

  @@unique([email, businessDomainId]) // Unique constraint on email + businessDomainId
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  shop_domain              String?
  shop_domain_display   String?
  user_name          String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime
  name       String?
  password   String?
  type       String?
  used       DateTime?
  targetUrl  String?

  @@unique([identifier, token])
}

model AuthorizationCode {
  code         String    @id
  client_id    String
  redirect_uri String
  expires_at   DateTime
  created_at   DateTime  @default(now())
  used         DateTime?
}

model Client {
  client_id         String         @id @unique
  client_secret     String
  redirect_uris     String
  grant_types       String
  scope             String
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  active            Boolean        @default(true)
  name              String
  description       String
  signout_uri       String
  auth_domain       String        // Domain related to login system
  brand_color       String?        // Brand color
  materials         Json?          // Materials array (each material contains title, description, image)
  businessDomainId  String         // Foreign key to BusinessDomain model
  tos_doc           String?        // Terms of Service document URL
  pp_doc            String?        // Privacy Policy document URL

  businessDomain    BusinessDomain @relation(fields: [businessDomainId], references: [id], onDelete: Cascade)
  accessTokens      AccessToken[]
  refreshTokens     RefreshToken[]
}


model AccessToken {
  token         String       @id
  client_id     String
  expires_at    DateTime     @default(dbgenerated("(now() + '1 year'::interval)"))
  created_at    DateTime     @default(now())
  refresh_token String
  client        Client       @relation(fields: [client_id], references: [client_id], onDelete: Cascade)
  refreshToken  RefreshToken @relation(fields: [refresh_token], references: [token], onDelete: Cascade)
}

model RefreshToken {
  token        String        @id
  client_id    String
  expires_at   DateTime      @default(dbgenerated("(now() + '2 years'::interval)"))
  created_at   DateTime      @default(now())
  accessTokens AccessToken[]
  client       Client        @relation(fields: [client_id], references: [client_id], onDelete: Cascade)
}

model BusinessDomain {
  id               String    @id @default(cuid())
  name             String    @unique
  description      String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  active           Boolean   @default(true)
  sso Boolean @default(false) // Field indicating if SSO is required
  users            User[]    // Relationship to User model
  clients          Client[]  // Relationship to Client model
}