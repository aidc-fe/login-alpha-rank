generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String
  emailVerified    DateTime?
  image            String?
  from             String?
  password         String?
  created_at       DateTime       @default(now())
  businessDomainId String
  updated_at       DateTime       @default(now()) @updatedAt @db.Timestamp(6)
  accounts         Account[]
  sessions         Session[]
  businessDomain   BusinessDomain @relation(fields: [businessDomainId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "13883979-d8ac-41db-a930-2a152f8b3c90")

  @@unique([email, businessDomainId], map: "unique_email_businessDomainId")
}

model Account {
  id                  String  @id @default(cuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  shop_domain         String?
  shop_domain_display String?
  user_name           String?
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier       String
  token            String    @unique
  expires          DateTime
  name             String?
  password         String?
  type             String?
  used             DateTime?
  targetUrl        String?
  businessDomainId String?   @db.VarChar(255)

  @@unique([identifier, token])
}

model AuthorizationCode {
  code         String    @id
  client_id    String
  redirect_uri String
  expires_at   DateTime
  created_at   DateTime  @default(now())
  used         DateTime?
}

model Client {
  client_id            String          @id @unique
  client_secret        String
  redirect_uris        String
  grant_types          String
  scope                String
  created_at           DateTime        @default(now())
  updated_at           DateTime        @updatedAt
  active               Boolean         @default(true)
  name                 String
  description          String
  signout_uri          String
  businessDomainId     String?
  auth_domain          String
  brand_color          String?
  materials            Json?           @db.Json
  pp_doc               String?
  tos_doc              String?
  favicon              String?
  title                String?
  support_email        String?
  mail_server_host     String          @default("")
  mail_server_port     String          @default("")
  mail_server_user     String          @default("")
  mail_server_password String          @default("")
  mail_template_image  String?
  login_methods        String[]       @default([])
  accessTokens         AccessToken[]
  businessDomain       BusinessDomain? @relation(fields: [businessDomainId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  refreshTokens        RefreshToken[]
}

model AccessToken {
  token         String       @id
  client_id     String
  expires_at    DateTime     @default(dbgenerated("(now() + '1 year'::interval)")) @db.Timestamp(6)
  created_at    DateTime     @default(now())
  refresh_token String
  client        Client       @relation(fields: [client_id], references: [client_id], onDelete: Cascade)
  refreshToken  RefreshToken @relation(fields: [refresh_token], references: [token], onDelete: Cascade)
}

model RefreshToken {
  token        String        @id
  client_id    String
  expires_at   DateTime      @default(dbgenerated("(now() + '2 years'::interval)")) @db.Timestamp(6)
  created_at   DateTime      @default(now())
  accessTokens AccessToken[]
  client       Client        @relation(fields: [client_id], references: [client_id], onDelete: Cascade)
}

model BusinessDomain {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  name        String    @unique
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  active      Boolean?  @default(true)
  sso         Boolean?  @default(false)
  clients     Client[]
  users       User[]
}
